#include<iostream>
#include<cstring>
#include<stdio.h>
#include<queue>
#include<vector>
using namespace std;
class city;
class headquarter;
class Warrior;

///////////////////////////////////////////////
/////////////////  Weapon  ///////////////////
///////////////////////////////////////////////

class weapon {
protected:
    int power;
    string name;
};

class arrow :public weapon {
private:
    int count = 3;
    string name = "arrow";
public:
    arrow(int R) {
        power = R;
    }
    void shoot(Warrior &w) {
        count--;
        if (count == 0)delete this;
    }
};

class bomb :public weapon {
public:
    void explode(Warrior &w1, Warrior &w2);
};

class sword :public weapon {
public:
    sword(int p) {//warrior strength 20%
        power = p*0.2;
    }
    
    void blunt() {
        power = 0.8*power;
        if (power == 0)delete this;
    }
};

///////////////////////////////////////////////
/////////////////  Warrior  ///////////////////
///////////////////////////////////////////////

class Warrior {
protected:
    headquarter *h;//red or blue
    bool attacked = false;
    int life;//life
    int strength;//strength of attack
    string name;//name
    float morale;//morale
    bool win = false;
    city *c;//city marched
    
public:
    Warrior() {}
    Warrior(string n,int l,int s) :name(n),life(l),strength(s) {}
    ~Warrior() {}
    void setheadquarter(headquarter *H) {
        h = H;
    }
    void setcity(city *C) {
        c = C;
    }
    void changelife(int ch) {
        life = life+ch;
        if (life <= 0)delete this;
    }
    string getname() {//get name
        return name;
    }
    int getlife() {
        return life;
    }
    void setlife(int ll) {
        life = ll;
        if (life <= 0)delete this;
    }
    
    void setmorale(float m) {
        morale = m;
    }
    
    float getmorale() {
        return morale;
    }
    
    void Attack(Warrior &w) {
        int ll;
        ll = w.getlife()-strength;
        w.changelife(-strength);
        if (ll>0)w.setattacked(true);
    }
    void fightback(Warrior &w) {
        if (attacked)w.changelife(-strength);
        setattacked(false);
    }
    void setattacked(bool a) {
        attacked = a;
    }
    void setwin(bool w) {
        win = w;
    }
    void award(int a) {
        life = life + a;
    }
    virtual void getweapon() {
        
    }
    
};
class dragon :public Warrior{
public:
    dragon(int l, int s):Warrior("dragon",l,s) {
        
    }
    
    void add_morale(float m) {
        morale = morale + m;
    }
};

class ninja :public Warrior {
public:
    ninja(int l, int s) :Warrior("najia",l,s) {
        
    }
    void fightback(Warrior &w) {//najia no fightback
    }
};

class wolf :public Warrior {
public:
    wolf(int l, int s) : Warrior("wolf", l, s) {
        
    }
};

class iceman :public Warrior {
public:
    iceman(int l, int s) : Warrior("iceman", l, s) {
        
    }
};

class lion :public Warrior {
public:
    lion(int l, int s) : Warrior("lion", l, s) {
        
    }
};


void bomb::explode(Warrior &w1, Warrior &w2) {
    w1.setlife(0);
    w2.setlife(0);
    delete this;
}

class city {
    
private:
    int number;//city number
    int life;
    int flag = 0;//red 1 or blue -1
    bool fight = false;
    int win=0;//red 1 blue -1
    
public:
    void setflag(int i) {
        flag = i;
    }
    int getflag() {
        return flag;
    }
    void setnum(int j) {
        number = j;
    }
    int getnum() {
        return number;
    }
    void setlife(int i)  {
        life = i;
    }
    int getlife() {
        return life;
    }
    void setwin(int i) {
        win = i;
    }
    int getwin() {
        return win;
    }
};

class headquarter {
    
private:
    int M;//total elements
    string side;//side of blue or red
    int total=0;//total warriors made
    bool taken = false;//whether is taken
    
public:
    headquarter(string s, int m) :side(s),M(m) {}
    int getM() {
        return M;
    }
    void setM(int m) {
        M = m;
    }
    bool check_warrior(int l){
        if(M>=l)return true;
        else return false;
    }
    void create_warrior(Warrior* w) {
            total++;
            cout << side << " " << w->getname() << " " << total << " born with strength " << w->getlife() << "," << w->getcount() << " " << w->getname() << " in "  << side << " headquarter" << endl;
                }
};


int main() {
    int ld, ln, li, ll, lw, R, N;
    int sd, sn, si, sl, sw;
    int Case;
    int c = 0;
    int M;
    cin >> Case;
    
    while (c<Case) {
        
        cin >> M >> N >> R;
        cin >> ld >> ln >> li >> ll >> lw;
        cin >> sd >> sn >> si >> sl >> sw;
        cout << "Case: " << c + 1 << endl;
        int life1[5] = { li,ll,lw,ln,ld };
        int life2[5] = { ll,ld,ln,li,lw };
        int strength1[5]={ si,sl,sw,sn,sd};
        int strength2[5]={ sl,sd,sn,si,sw};
        string warrior1[5] = { "iceman","lion","wolf","ninja","dragon" };
        string warrior2[5] = { "lion","dragon","ninja","iceman","wolf" };
        
        queue<string> w1;
        queue<int> l1;
        queue<int> s1;
        queue<string> w2;
        queue<int> l2;
        queue<int> s2;
        
        vector<Warrior*> warriors1;
        
        for (int i = 0; i<5; i++) {
            w1.push(warrior1[i]);
            l1.push(life1[i]);
            s1.push(strength1[i]);
            w2.push(warrior2[i]);
            l2.push(life2[i]);
            s2.push(strength2[i]);
        }
        
        headquarter h1("red",M);
        headquarter h2("blue",M);
        
        int time = 0;
        int stop1 = 0;
        int stop2 = 0;
        while (true) {
            /////////////// make warriors ////////////////////
            int nomake=0;
            while(!h1.check_warrior(l1.front())){
                l1.push(l1.front());
                l1.pop();
                s1.push(s1.front());
                s1.pop();
                w1.push(w1.front());
                w1.pop();
                nomake++;
                if(nomake==5)break;
            }
            if(nomake<5){
                Warrior *w;
                if(w1.front()=="iceman"){
                    Warrior *w=new iceman(l1.front(),s1.front());
                    warriors1.push_back(w);
                }
                if(w1.front()=="lion"){
                    Warrior *w=new lion(l1.front(),s1.front());
                    warriors1.push_back(w);
                }
                if(w1.front()=="wolf"){
                    Warrior *w=new wolf(l1.front(),s1.front());
                    warriors1.push_back(w);
                }
                if(w1.front()=="ninja"){
                    Warrior *w=new ninja(l1.front(),s1.front());
                    warriors1.push_back(w);
                }
                if(w1.front()=="dragon"){
                    Warrior *w=new dragon(l1.front(),s1.front());
                    warriors1.push_back(w);
                }
                h1.create_warrior(w);

            }
            /////////////// lion run away ///////////////////////
            /////////////// Warrior march ///////////////////////
            /////////////// shoot arrow ////////////////////////
            /////////////// bomb explode ///////////////////////
            ///////////////  attack ////////////////////////////
            //////////////// fight back ////////////////////////
            ///////////////// warrior killed //////////////////
            ///////////////// warrior yell ////////////////////
            ///////////////// get elements ////////////////////
            ///////////////// rise flag //////////////////////
            ///////////////// reach headquarter///////////////
            ///////////////// headquarter taken ///////////////
            ///////////////// report elements /////////////////
            ///////////////// report weapons //////////////////
        }
        
        c++;
        
    }
    return 0;
}
