
#include<iostream>
#include<string>
#include<cstring>
#include<stdio.h>
#include<queue>
#include<vector>
using namespace std;
class city;
/////////////////////////////////////////////////////////
///////////////// headquarter ///////////////////////////
/////////////////////////////////////////////////////////

class headquarter {

private:
	int M;//total elements
	string side;//side of blue or red
	int total = 0;//total warriors made
	int cd = 0, ci = 0, cl = 0, cn = 0, cw = 0;
	bool taken = false;//whether is taken

public:
	headquarter(string s, int m) :side(s), M(m) {}
	int getM() {
		return M;
	}
	void setM(int m) {
		M = m;
	}
	bool check_warrior(int l) {
		if (M >= l)return true;
		else return false;
	}

	string getside() {
		return side;
	}
	void add_dragon() {
		cd++;
		total++;
	}
	void add_ninja() {
		cn++;
		total++;
	}
	void add_lion() {
		cl++;
		total++;
	}
	void add_wolf() {
		cw++;
		total++;
	}
	void add_iceman() {
		ci++;
		total++;
	}
	int gettotal() {
		return total;
	}
	int get_dragon() {
		return cd;
	}
	int get_iceman() {
		return ci;
	}
	int get_wolf() {
		return cw;
	}
	int get_lion() {
		return cl;
	}
	int get_ninja() {
		return cn;
	}
};

class Warrior;

///////////////////////////////////////////////
/////////////////  Weapon  ///////////////////
///////////////////////////////////////////////

class weapon {
protected:
	int power;
	string name;
	bool lost = false;
public:
	void loseweapon() {

	}
	string getname() {
		return name;
	}
};

class arrow :public weapon {
private:
	int count = 3;
	static int R;
public:
	arrow() {
		name = "arrow";
		power = R;
	}
	void shoot(Warrior &w) {
		count--;
		if (count == 0)lost = true;
	}
	static void setR(int r) {
		R = r;
	}
};
int arrow::R = 0;

class bomb :public weapon {
public:
	bomb() { name = "bomb"; }
	void explode(Warrior &w1, Warrior &w2);
};

class sword :public weapon {
public:
	sword(int p) {//warrior strength 20%
		power = p*0.2;
		name = "sword";
	}

	void blunt() {
		power = 0.8*power;
		if (power == 0)lost = true;
	}
};

///////////////////////////////////////////////
/////////////////  Warrior  ///////////////////
///////////////////////////////////////////////

class Warrior {
protected:
	headquarter *h;//red or blue
	bool attacked = false;
	bool dead = false;
	int life;//life
	int strength;//strength of attack
	string name;//name
	double morale;//morale
	bool win = false;
	city *c;//city marched
	vector<weapon*> wp;
	
public:
	Warrior() {}
	Warrior(string n, int l, int s, headquarter* H) :name(n), life(l), strength(s) ,h(H){ morale = 0; }
	~Warrior() {}
	void setcity(city *C) {
		c = C;
	}
	void changelife(int ch) {
		life = life + ch;
		if (life <= 0)dead = true;
	}
	string getname() {//get name
		return name;
	}
	int getlife() {
		return life;
	}
	void setlife(int ll) {
		life = ll;
		if (life <= 0)dead = true;
	}

	virtual void warrior_print() = 0;
	
	void Attack(Warrior &w) {
		int ll;
		ll = w.getlife() - strength;
		w.changelife(-strength);
		if (ll>0)w.setattacked(true);
	}
	void fightback(Warrior &w) {
		if (attacked)w.changelife(-strength);
		setattacked(false);
	}
	void setattacked(bool a) {
		attacked = a;
	}
	void setwin(bool w) {
		win = w;
	}
	void award(int a) {
		life = life + a;
	}
	virtual void getweapon(int wpn) {

	}
	virtual void getweapon(int wpn1, int wpn2) {

	}
	void setmorale(double m) {
		morale = m;
	}

	double getmorale() {
		return morale;
	}

};


class dragon :public Warrior {

public:
	dragon(int l, int s, headquarter* H) :Warrior("dragon", l, s, H) {
		h->add_dragon();
		morale = (double)(h->getM())/ l-1;
		getweapon( h->gettotal()% 3);		
	}
	
	void add_morale(double m) {
		morale = morale + m;
	}
	void getweapon(int wpn) {
		weapon *wpp;
		if (wpn == 0)wpp = new sword(strength);
		if (wpn == 1)wpp = new bomb();
		if (wpn == 2)wpp = new arrow();
		wp.push_back(wpp);
	}
	
	void warrior_print() {
		cout << h->getside() << " " << name << " " << h->gettotal() << " born with strength " << life << "," << h->get_dragon() << " " << name << " in " << h->getside() << " headquarter" << endl;
		cout << "It has a " << (wp.at(0))->getname() << ",and its morale is ";
		printf("%0.2f\n", morale);
	}

};


class ninja :public Warrior {

public:
	ninja(int l, int s, headquarter* H) :Warrior("najia", l, s, H) {
		h->add_ninja();
		getweapon(h->gettotal() % 3, (h->gettotal() +1) % 3);
		
	}
	
	void fightback(Warrior &w) {//najia no fightback
	}
	void getweapon(int wpn) {
		weapon *wpp;
		if (wpn == 0)wpp = new sword(strength);
		if (wpn == 1)wpp = new bomb();
		if (wpn == 2)wpp = new arrow();
		wp.push_back(wpp);
	}
	void getweapon(int wpn1, int wpn2) {
		getweapon(wpn1);
		getweapon(wpn2);
	}
	
	void warrior_print() {
		cout << h->getside() << " " << name << " " << h->gettotal() << " born with strength " << life << "," << h->get_ninja() << " " << name << " in " << h->getside() << " headquarter" << endl;
		cout << "It has a " << (wp.at(0))->getname() << ",and a " << (wp.at(1))->getname() << endl;
	}
};


class wolf :public Warrior {
public:
	wolf(int l, int s, headquarter* H) : Warrior("wolf", l, s, H) {
		h->add_wolf();
	}
	
	void warrior_print() {
		cout << h->getside() << " " << name << " " << h->gettotal() << " born with strength " << life << "," << h->get_wolf() << " " << name << " in " << h->getside() << " headquarter" << endl;
	}
};


class iceman :public Warrior {

public:
	iceman(int l, int s, headquarter* H) : Warrior("iceman", l, s, H) {		
		h->add_iceman(); 
		getweapon(H->gettotal() % 3);
		
	}
	
	void getweapon(int wpn) {
		weapon *wpp;
		if (wpn == 0)wpp = new sword(strength);
		if (wpn == 1)wpp = new bomb();
		if (wpn == 2)wpp = new arrow();
		wp.push_back(wpp);
	}
	
	void warrior_print() {
		cout << h->getside() << " " << name << " " << h->gettotal() << " born with strength " << life << "," << h->get_iceman() << " " << name << " in " << h->getside() << " headquarter" << endl;
		cout << "It has a " << (wp.at(0))->getname() << endl;
	}
};


class lion :public Warrior {
private:
	int loyalty;
public:
	lion(int l, int s, headquarter* H) : Warrior("lion", l, s, H) {		
		h->add_lion(); 
		loyalty = h->getM()- l;
	}
	
	
	void warrior_print() {
		cout << h->getside() << " " << name << " " << h->gettotal() << " born with strength " << life << "," << h->get_lion() << " " << name << " in " << h->getside() << " headquarter" << endl;
		cout << "It's loyalty is " << loyalty << endl;
	}
};


void bomb::explode(Warrior &w1, Warrior &w2) {
	w1.setlife(0);
	w2.setlife(0);
	delete this;
};

class city {

private:
	int number;//city number
	int life;
	int flag = 0;//red 1 or blue -1
	bool fight = false;
	int win = 0;//red 1 blue -1

public:
	void setflag(int i) {
		flag = i;
	}
	int getflag() {
		return flag;
	}
	void setnum(int j) {
		number = j;
	}
	int getnum() {
		return number;
	}
	void setlife(int i) {
		life = i;
	}
	int getlife() {
		return life;
	}
	void setwin(int i) {
		win = i;
	}
	int getwin() {
		return win;
	}
};


int main() {
	int ld, ln, li, ll, lw, R, N;
	int sd, sn, si, sl, sw;
	int Case;
	int c = 0;
	int M;
	cin >> Case;

	while (c<Case) {

		cin >> M;// >> N >> R;
		cin >> ld >> ln >> li >> ll >> lw;
		//cin >> sd >> sn >> si >> sl >> sw;
		sd = 1; sn = 1; si = 1; sl = 1; sw = 1;
		cout << "Case: " << c + 1 << endl;
		int life1[5] = { li,ll,lw,ln,ld };
		int life2[5] = { ll,ld,ln,li,lw };
		int strength1[5] = { si,sl,sw,sn,sd };
		int strength2[5] = { sl,sd,sn,si,sw };
		string warrior1[5] = { "iceman","lion","wolf","ninja","dragon" };
		string warrior2[5] = { "lion","dragon","ninja","iceman","wolf" };
		//arrow::setR(R);

		queue<string> w1;
		queue<int> l1;
		queue<int> s1;
		queue<string> w2;
		queue<int> l2;
		queue<int> s2;

		vector<Warrior*> warriors1;
		vector<Warrior*> warriors2;

		for (int i = 0; i<5; i++) {
			w1.push(warrior1[i]);
			l1.push(life1[i]);
			s1.push(strength1[i]);
			w2.push(warrior2[i]);
			l2.push(life2[i]);
			s2.push(strength2[i]);
		}

		headquarter *h1 = new headquarter("red", M);
		headquarter *h2 = new headquarter("blue", M);

		int time = 0;

		int nomake1 = 0;
		int nomake2 = 0;
		int stop = 0,stop1=0,stop2=0;

		while (stop<2) {
			printf("%03d ", time);
			if (stop1==0) {
				/////////////// make warriors ////////////////////
				int nomake1 = 0;
				while (!h1->check_warrior(l1.front())) { //find a warrior that can be made
					l1.push(l1.front());
					l1.pop();
					s1.push(s1.front());
					s1.pop();
					w1.push(w1.front());
					w1.pop();
					nomake1++;
					if (nomake1 == 5) {
						cout << "red headquarter stops making warriors" << endl;
						stop++;
						stop1++;
						break;
					}
				}
				
				if (nomake1 < 5) {					
					if (w1.front() == "iceman") {						
						Warrior *w = new iceman(l1.front(), s1.front(),h1);						
						h1->setM(h1->getM() - w->getlife());						
						w->warrior_print();						
						warriors1.push_back(w);						
					}
					if (w1.front() == "lion") {						
						Warrior *w = new lion(l1.front(), s1.front(),h1);						
						h1->setM(h1->getM() - w->getlife());
						w->warrior_print();
						warriors1.push_back(w);
					}
					if (w1.front() == "wolf") {
						Warrior *w = new wolf(l1.front(), s1.front(),h1);						
						h1->setM(h1->getM() - w->getlife());
						w->warrior_print();
						warriors1.push_back(w);
					}
					if (w1.front() == "ninja") {
						Warrior *w = new ninja(l1.front(), s1.front(),h1);						
						h1->setM(h1->getM() - w->getlife());
						w->warrior_print();
						warriors1.push_back(w);
					}
					if (w1.front() == "dragon") {
						Warrior *w = new dragon(l1.front(), s1.front(), h1);						
						h1->setM(h1->getM() - w->getlife());
						w->warrior_print();
						warriors1.push_back(w);
					}					

					l1.push(l1.front());
					l1.pop();
					s1.push(s1.front());
					s1.pop();
					w1.push(w1.front());
					w1.pop();
				}
			}

			if (stop2==0) {
				/////////////// make warriors ////////////////////
				int nomake2 = 0;
				
				while (!h2->check_warrior(l2.front())) { //find a warrior that can be made
					l2.push(l2.front());
					l2.pop();
					s2.push(s2.front());
					s2.pop();
					w2.push(w2.front());
					w2.pop();
					nomake2++;
					if (nomake2 == 5) {
						cout << "blue headquarter stops making warriors" << endl;
						stop++;
						stop2++;
						break;
					}
				}
				
				if (nomake2 < 5) {					
					if (w2.front() == "iceman") {
						Warrior *w = new iceman(l2.front(), s2.front(),h2);						
						h2->setM(h2->getM() - w->getlife());
						w->warrior_print();
						warriors2.push_back(w);
					}
					if (w2.front() == "lion") {						
						Warrior *w = new lion(l2.front(), s2.front(), h2);						
						h2->setM(h2->getM() - w->getlife());
						w->warrior_print();
						warriors2.push_back(w);
					}
					if (w2.front() == "wolf") {
						Warrior *w = new wolf(l2.front(), s2.front(),h2);						
						h2->setM(h2->getM() - w->getlife());
						w->warrior_print();
						warriors2.push_back(w);
					}
					if (w2.front() == "ninja") {
						Warrior *w = new ninja(l2.front(), s2.front(),h2);						
						h2->setM(h2->getM() - w->getlife());
						w->warrior_print();
						warriors2.push_back(w);
					}
					if (w2.front() == "dragon") {
						Warrior *w = new dragon(l2.front(), s2.front(), h2);						
						h2->setM(h2->getM() - w->getlife());
						w->warrior_print();
						warriors2.push_back(w);
					}
					

					l2.push(l2.front());
					l2.pop();
					s2.push(s2.front());
					s2.pop();
					w2.push(w2.front());
					w2.pop();

				}
			}
			
			time++;
			/////////////// lion run away ///////////////////////
			/////////////// Warrior march ///////////////////////
			/////////////// shoot arrow ////////////////////////
			/////////////// bomb explode ///////////////////////
			///////////////  attack ////////////////////////////
			//////////////// fight back ////////////////////////
			///////////////// warrior killed //////////////////
			///////////////// warrior yell ////////////////////
			///////////////// get elements ////////////////////
			///////////////// rise flag //////////////////////
			///////////////// reach headquarter///////////////
			///////////////// headquarter taken ///////////////
			///////////////// report elements /////////////////
			///////////////// report weapons //////////////////
		}
		c++;
	}
	return 0;
}
